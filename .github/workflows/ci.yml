name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  python:
    name: Python 3.11 checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        check: [ruff, pytest, pip-audit]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          case "${{ matrix.check }}" in
            ruff) python -m pip install ruff ;;
            pytest) python -m pip install -r requirements.txt pytest pytest-anyio ;;
            pip-audit) python -m pip install -r requirements.txt pip-audit ;;
          esac
      - name: Run ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            ruff) ruff check . ;;
            pytest) pytest ;;
            pip-audit) pip-audit -r requirements.txt ;;
          esac

  provider-integration:
    name: Provider smoke tests
    runs-on: ubuntu-latest
    needs: python
    permissions:
      contents: read
    if: ${{ secrets.OPENAI_API_KEY != '' && secrets.GEMINI_API_KEY != '' }}
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install provider dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt google-generativeai
      - name: OpenAI smoke test
        run: |
          python - <<'PY'
from openai import OpenAI

def extract_text(response):
    direct = getattr(response, "output_text", None)
    if direct:
        return direct
    return "".join(
        getattr(part, "text", "")
        for item in getattr(response, "output", []) or []
        for part in getattr(item, "content", []) or []
    )


client = OpenAI()
text = extract_text(client.responses.create(model="gpt-4o-mini", input="Respond with OK")).strip().lower()
if "ok" not in text:
    raise SystemExit("Unexpected OpenAI response")
PY
      - name: Gemini smoke test
        run: |
          python - <<'PY'
import os
import google.generativeai as genai
api_key = os.getenv("GOOGLE_GEMINI_API_KEY") or os.getenv("GEMINI_API_KEY")
if not api_key:
    raise SystemExit("Missing Gemini API key")
genai.configure(api_key=api_key)
result = genai.GenerativeModel("gemini-1.5-flash").generate_content("Respond with OK")
text = (result.text or "").strip().lower()
if "ok" not in text:
    raise SystemExit("Unexpected Gemini response")
PY
