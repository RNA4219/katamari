name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  python:
    name: Python 3.11 checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [ruff, pytest, pip-audit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-anyio ruff pip-audit

      - name: Run ruff
        if: matrix.check == 'ruff'
        run: ruff check .

      - name: Run pytest
        if: matrix.check == 'pytest'
        run: pytest

      - name: Run pip-audit
        if: matrix.check == 'pip-audit'
        run: pip-audit -r requirements.txt

  provider-integration:
    name: Provider smoke tests
    runs-on: ubuntu-latest
    needs: python
    if: ${{ secrets.OPENAI_API_KEY != '' && secrets.GEMINI_API_KEY != '' }}
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install google-generativeai

      - name: OpenAI smoke test
        run: |
          python - <<'PY'
import sys
from openai import OpenAI

client = OpenAI()
response = client.responses.create(
    model="gpt-4o-mini",
    input="Respond with OK",
)
text = response.output[0].content[0].text.strip().lower()
if "ok" not in text:
    sys.exit("Unexpected OpenAI response")
PY

      - name: Gemini smoke test
        run: |
          python - <<'PY'
import os
import sys

import google.generativeai as genai

api_key = os.getenv("GOOGLE_GEMINI_API_KEY") or os.getenv("GEMINI_API_KEY")
if not api_key:
    sys.exit("Missing Gemini API key")

genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-1.5-flash")
result = model.generate_content("Respond with OK")
text = (result.text or "").strip().lower()
if "ok" not in text:
    sys.exit("Unexpected Gemini response")
PY
